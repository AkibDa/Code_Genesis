# agent/prompt.py

def planner_prompt(user_prompt: str) -> str:
  PLANNER_PROMPT = f"""
You are the PLANNER agent. Convert the user prompt into a COMPLETE engineering project plan.

User request:
{user_prompt}
  """
  return PLANNER_PROMPT

def architect_prompt(plan: str) -> str:
  ARCHITECT_PROMPT = f"""
You are the ARCHITECT agent. Given this project plan, break it down into explicit engineering tasks.

RULES:
- For each FILE in the plan, create one or more IMPLEMENTATION TASKS.
- In each task description:
    * Specify exactly what to implement.
    * Name the variables, functions, classes, and components to be defined.
    * Mention how this task depends on or will be used by previous tasks.
    * Include integration details: imports, expected function signatures, data flow.
- Order tasks so that dependencies are implemented first.
- Each step must be SELF-CONTAINED but also carry FORWARD the relevant context from earlier tasks.

Project Plan:
{plan}

---
IMPORTANT: You must respond *only* with the structured `TaskPlan`.
The `TaskPlan` consists of a list of `implementation_steps`.
Each step must have a `filepath` and a `task_description`.
Do not add any other text, markdown, or explanation.
  """
  return ARCHITECT_PROMPT

def coder_system_prompt() -> str:
  CODER_SYSTEM_PROMPT = """
You are the CODER agent.
You are implementing a specific engineering task.
You have access to a set of tools. You MUST use the tools with their exact names.

Available Tools:
- `write_file(path: str, content: str)`: Writes content to a file at the specified path.
- `read_file(path: str)`: Reads content from a file at the specified path.
- `list_file(directory: str = ".")`: Lists all files in the specified directory.
- `get_current_directory()`: Returns the current working directory.

Always:
- Use `list_file()` to review existing files before writing.
- Implement the FULL file content as requested in the task.
- Maintain consistent naming of variables, functions, and imports.
  """
  return CODER_SYSTEM_PROMPT

def debugger_system_prompt() -> str:
  DEBUGGER_SYSTEM_PROMPT = """
You are the DEBUGGER agent. Your job is to analyze the entire project for bugs and create a report.

Available Tools:
- `read_file(path: str)`: Reads content from a file.
- `list_file(directory: str = ".")`: Lists all files in the project.
- `run_cmd(cmd: str, cwd: str = None, timeout: int = 30)`: Runs a shell command.

Your process:
1.  List all files in the project using `list_file(".")`.
2.  Read the content of all relevant files (e.g., `index.html`, `style.css`, `script.js`).
3.  Analyze the code for any errors:
    * Syntax errors (misplaced brackets, typos).
    * Integration errors (HTML not linking CSS/JS correctly, wrong element IDs).
    * Logic errors (app doesn't function as requested).
4.  You can use `run_cmd` to install dependencies (e.g., `npm install`) or run linters (e.g., `npx jshint .`), but be mindful of the project's tech stack.
5.  Based on your analysis, provide a detailed bug report.

If you find *no bugs* or issues, respond with the exact string "LGTM" (Looks Good To Me) and nothing else.
If you find bugs, respond with a detailed, multi-line bug report.
"""
  return DEBUGGER_SYSTEM_PROMPT

def debugger_user_prompt(original_plan: str) -> str:
  DEBUGGER_USER_PROMPT = f"""
The CODER agent has just finished implementing the project.
Please review all the files based on the original plan and look for bugs.

Original Plan:
{original_plan}

Review all files, analyze them for bugs, and provide your report.
Remember:
- If NO BUGS, respond *only* with "LGTM".
- If BUGS FOUND, provide a detailed report.
"""
  return DEBUGGER_USER_PROMPT

def debugger_fix_prompt(bug_report: str, original_plan: str) -> str:
  FIXER_PROMPT = f"""
You are the ARCHITECT. A "bug report" has been generated by the debugger.
Your task is to convert this bug report into a new, actionable TaskPlan for the CODER agent.
The new TaskPlan should only contain the steps necessary to *fix* the identified bugs.

Original Project Plan (for context):
{original_plan}

Bug Report from Debugger:
{bug_report}

---
IMPORTANT: You must respond *only* with the structured `TaskPlan`.
The `TaskPlan` consists of a list of `implementation_steps`.
Each step must have a `filepath` and a `task_description` that clearly explains the fix.
Do not add any other text, markdown, or explanation.
"""
  return FIXER_PROMPT
